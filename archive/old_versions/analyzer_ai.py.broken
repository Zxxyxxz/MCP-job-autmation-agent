"""AI-Powered Job Analyzer using Claude API
Provides intelligent job matching and cover letter generation"""

import json
import os
import re
import time
from typing import Dict, Optional, Tuple
from datetime import datetime

# Selenium imports for description fetching
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

try:
    import anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False
    print('Warning: anthropic package not installed. Run: pip install anthropic')


class AIJobAnalyzer:
    """Use Claude to analyze job fit and generate application materials"""
    
    def __init__(self, api_key: Optional[str] = None, profile_path: str = 'yigit_profile.json'):
        """Initialize analyzer with Claude API"""
        if not ANTHROPIC_AVAILABLE:
            raise ImportError('anthropic package not installed. Install with: pip install anthropic')
        
        # Get API key from environment or parameter
        self.api_key = api_key or os.getenv('ANTHROPIC_API_KEY')
        if not self.api_key:
            raise ValueError(
                'Anthropic API key required. Set ANTHROPIC_API_KEY environment variable or pass api_key parameter.\n'
                'Get your key at: https://console.anthropic.com/'
            )
        
        self.client = anthropic.Anthropic(api_key=self.api_key)
        
        # Load candidate profile
        with open(profile_path, 'r') as f:
            self.profile = json.load(f)
        
        # Setup Selenium driver for description fetching
        self.setup_driver()
        
        print('AI Analyzer initialized with Claude API')

    def setup_driver(self):
        """Setup Chrome driver for fetching job descriptions"""
        try:
            options = webdriver.ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--disable-gpu')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Chrome(options=options)
            self.wait = WebDriverWait(self.driver, 10)
            print('Selenium driver initialized')
        except Exception as e:
            print(f'Warning: Could not setup Chrome driver: {e}')
            print('Description fetching will be skipped')
            self.driver = None
            self.wait = None
    
    def get_full_description(self, job_url):
        """Fetch full job description from LinkedIn job page"""
        if not self.driver or not job_url:
            return ""
        
        try:
            self.driver.get(job_url)
            time.sleep(2)
            
            # Try to click See more button
            see_more_selectors = [
                "button[aria-label='Click to see more description']",
                "button.jobs-description__see-more",
                "button.see-more-less-html__button",
                "button[data-tracking-control-name='public_jobs_show-more-html-btn']"
            ]
            
            for selector in see_more_selectors:
                try:
                    button = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    button.click()
                    print('    Expanded description')
                    time.sleep(1)
                    break
                except:
                    continue
            
            # Get description text
            description_selectors = [
                "div.jobs-description__content",
                "div.show-more-less-html__markup",
                "div.description__text",
                "section.jobs-description"
            ]
            
            for selector in description_selectors:
                try:
                    elem = self.driver.find_element(By.CSS_SELECTOR, selector)
                    description = elem.text
                    if description:
                        return description
                except:
                    continue
            
            return ""
            
        except Exception as e:
            print(f'    Error fetching description: {e}')
            return ""

    def analyze_job_fit(self, job_data: Dict) -> Dict:
        """Analyze how well a job matches the candidate profile"""
        
        job_title = job_data.get('title', 'Unknown')
        company = job_data.get('company', 'Unknown')
        description = job_data.get('description', '')
        
        print(f'\nAnalyzing: {job_title} at {company}...')
        
        # Fetch full description if not present or too short
        if not description or len(description) < 50:
            job_url = job_data.get('url', '')
            if job_url:
                print('  Fetching full description from job page...')
                description = self.get_full_description(job_url)
                if description:
                    print(f'  Retrieved {len(description)} character description')
                    job_data['description'] = description
                else:
                    print('  Could not fetch description - analyzing based on title/company')
        
        if not description:
            return {
                'score': 0,
                'analysis': 'No job description available for analysis',
                'strengths': [],
                'concerns': ['Missing job description'],
                'recommendation': 'Cannot analyze without description'
            }
        
        # Create detailed prompt for Claude
        prompt = f"""Analyze this job opportunity for the candidate:

JOB DETAILS:
Title: {job_title}
Company: {company}
Description:
{description[:3000]}  

CANDIDATE PROFILE:
{json.dumps(self.profile, indent=2)}

Provide your analysis in the following JSON format:
{{
    "score": <0-100 match score>,
    "analysis": "<detailed analysis of fit>",
    "strengths": ["<strength 1>", "<strength 2>", ...],
    "concerns": ["<concern 1>", "<concern 2>", ...],
    "recommendation": "<should apply or not and why>"
}}

Be honest and critical in your assessment."""

        try:
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=2000,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            response_text = response.content[0].text
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                analysis = json.loads(json_match.group())
                print(f'  Match Score: {analysis.get("score", 0)}/100')
                return analysis
            else:
                return {
                    'score': 50,
                    'analysis': response_text,
                    'strengths': [],
                    'concerns': [],
                    'recommendation': 'Review manually'
                }
                
        except Exception as e:
            print(f'Error analyzing job: {e}')
            return {
                'score': 0,
                'analysis': f'Error: {str(e)}',
                'strengths': [],
                'concerns': ['Analysis failed'],
                'recommendation': 'Review manually'
            }

    def generate_cover_letter(self, job_data: Dict, analysis: Dict) -> str:
        """Generate a tailored cover letter"""
        
        job_title = job_data.get('title', 'Unknown')
        company = job_data.get('company', 'Unknown')
        description = job_data.get('description', '')
        
        prompt = f"""Write a compelling cover letter for this job application:

JOB:
Title: {job_title}
Company: {company}
Description: {description[:2000]}

CANDIDATE PROFILE:
{json.dumps(self.profile, indent=2)}

ANALYSIS INSIGHTS:
{json.dumps(analysis, indent=2)}

Write a professional, engaging cover letter that:
1. Shows genuine interest in the role
2. Highlights relevant experience and skills
3. Addresses key requirements from the job description
4. Demonstrates cultural fit
5. Is concise (3-4 paragraphs)

Make it personal and specific to this role."""

        try:
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=1500,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            cover_letter = response.content[0].text
            print(f'\nGenerated cover letter ({len(cover_letter)} characters)')
            return cover_letter
            
        except Exception as e:
            print(f'Error generating cover letter: {e}')
            return f'Error generating cover letter: {str(e)}'
    
    def __del__(self):
        """Cleanup Selenium driver on exit"""
        if hasattr(self, 'driver') and self.driver:
            try:
                self.driver.quit()
            except:
                pass


# Test function
if __name__ == "__main__":
    analyzer = AIJobAnalyzer()
    
    sample_job = {
        'title': 'Senior Software Engineer',
        'company': 'Tech Company',
        'description': 'We are looking for an experienced software engineer...',
        'url': 'https://www.linkedin.com/jobs/view/123456789'
    }
    
    analysis = analyzer.analyze_job_fit(sample_job)
    print('\nAnalysis:', json.dumps(analysis, indent=2))
    
    if analysis.get('score', 0) >= 70:
        cover_letter = analyzer.generate_cover_letter(sample_job, analysis)
        print('\nCover Letter:\n', cover_letter)

    def generate_cover_letter(self, job_data: Dict, analysis: Dict) -> str:
        """Generate a tailored cover letter"""
        
        job_title = job_data.get('title', 'Unknown')
        company = job_data.get('company', 'Unknown')
        description = job_data.get('description', '')
        
        prompt = f"""Write a compelling cover letter for this job application:

JOB:
Title: {job_title}
Company: {company}
Description: {description[:2000]}

CANDIDATE PROFILE:
{json.dumps(self.profile, indent=2)}

ANALYSIS INSIGHTS:
{json.dumps(analysis, indent=2)}

Write a professional, engaging cover letter that:
1. Shows genuine interest in the role
2. Highlights relevant experience and skills
3. Addresses key requirements from the job description
4. Demonstrates cultural fit
5. Is concise (3-4 paragraphs)

Make it personal and specific to this role."""

        try:
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=1500,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            cover_letter = response.content[0].text
            print(f'Generated cover letter ({len(cover_letter)} characters)')
            return cover_letter
            
        except Exception as e:
            print(f'Error generating cover letter: {e}')
            return f'Error generating cover letter: {str(e)}'
    
    def __del__(self):
        """Cleanup Selenium driver on exit"""
        if hasattr(self, 'driver') and self.driver:
            try:
                self.driver.quit()
            except:
                pass
